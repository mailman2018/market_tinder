// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Customer specific fields
  events        Event[]
  preferences   EventPreference[]

  // Vendor specific fields
  services      Service[]
  vendorProfile VendorProfile?
  matches       Match[]

  // Common fields
  messages      Message[]
  reviews       Review[]
}

model VendorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  businessName String
  description String?
  location    String?
  latitude    Float?
  longitude   Float?
  phone       String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Event {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String?
  eventDate   DateTime?
  location    String?
  latitude    Float?
  longitude   Float?
  budget      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  preferences EventPreference[]
  matches     Match[]
}

model EventPreference {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  category    String   // e.g., "flowers", "catering", "venue"
  description String?
  style       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  vendorId    String
  vendor      User     @relation(fields: [vendorId], references: [id])
  name        String
  description String?
  category    String
  price       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Match {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  vendorId    String
  vendor      User     @relation(fields: [vendorId], references: [id])
  status      MatchStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id          String   @id @default(cuid())
  senderId    String
  sender      User     @relation(fields: [senderId], references: [id])
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum MatchStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
} 